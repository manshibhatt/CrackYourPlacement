class Solution {
    ArrayList<String> ans;
    int[][] vis;
    public ArrayList<String> findPath(int[][] mat) {
        
        ans=new ArrayList<>();
        vis=new int[mat.length][mat[0].length]; 
        
        if(mat[0][0]==0||mat[mat.length-1][mat[0].length-1]==0) return ans;
        
        vis[0][0]=1;
        dfs(0,0,mat,new StringBuilder());
        
        return ans;
    } 
    
    int[][] dir={{0,1,1},{1,0,2},{0,-1,3},{-1,0,4}}; 
    
    public boolean isValid(int i,int j,int[][] grid){
       if(i>=0 && j>=0 && i<grid.length && j<grid[0].length
              && vis[i][j]==0 && grid[i][j]==1
       ) return true;
       return false;
   }
    
    public void dfs(int i,int j,int[][] mat,StringBuilder s){
        if(i==mat.length-1 && j==mat[0].length-1){
            ans.add(s.toString());
            return;
        }
        
        for(int[] d:dir){
            
            int ni=i+d[0];
            int nj=j+d[1];
            
            if( isValid(ni,nj,mat)==false) continue;
            
          
            vis[ni][nj]=1;
            s.append(d[2]==1?"R":(d[2]==2?"D":(d[2]==3?"L":"U")));
            
            dfs(ni,nj,mat,s);
            
            s.deleteCharAt(s.length() - 1);
            vis[ni][nj]=0;
            
        }

      
    }
}
