class Solution {
    public int numIslands(char[][] grid) {
        int cnt=0;

        int[][] visited=new int[grid.length][grid[0].length];

        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(visited[i][j]==0 && grid[i][j]=='1'){
                   dfs(i,j,grid,visited);
                   cnt++;
                }
                
            }
        }
        return cnt;
    } 
     
   int[] drow={-1,0,1,0};
   int[] dcol={0,-1,0,1}; 

   public boolean isValid(int i,int j,char[][] grid){
       if(i>=0 && j>=0 && i<grid.length && j<grid[0].length) return true;
       return false;
   }

    public void dfs(int r,int c,char[][] grid,int[][] visited){
        visited[r][c]=1;

        for(int i=0;i<4;i++){
           int nrow=r+drow[i];
           int ncol=c+dcol[i]; 

        if(isValid(nrow,ncol,grid) && visited[nrow][ncol]==0 && grid[nrow][ncol]=='1'){
            dfs(nrow,ncol,grid,visited);
        }

        } 

         
    }

}
