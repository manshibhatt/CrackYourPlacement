class Solution {

class UnionFind {
    int[] parent, size;
    public UnionFind(int n) {
        parent = new int[n]; size = new int[n];
        for (int i = 0; i < n; i++) { 
            parent[i] = i; size[i] = 1;
        }
    }

     public int find(int x) {
       if (x == parent[x]) return x;
        return parent[x] = find(parent[x]); 
    }
    public boolean union(int x, int y) {
       int px=find(x);
       int py=find(y);

       if(px==py) return false;

         if(size[px]>size[py]){
            size[px]+=size[py];
            parent[py]=px;
         }else{
            size[py]+=size[px];
            parent[px]=py;
         }

       return true; 
    }


}

    
    public int[] findRedundantConnection(int[][] edges) {
        int n=edges.length;

         UnionFind uf = new UnionFind(n);
        for (int[] e : edges) {
            if (!uf.union(e[0]-1, e[1]-1)) return new int[]{e[0], e[1]};
        }
        return new int[]{};

    }
    
}
